import { Express } from "express";
import passport from "./passport.middleware";
import { hashPassword } from "./password.middleware";
import { storage } from "../db/storage";
// import { User as SelectUser } from "./@shared/schema";
type SelectUser = {
  id: string;
  fullname: string;
  username: string;
  email: string;
};

export function setupAuthRoutes(app: Express) {
  app.post("/api/register", async (req, res, next) => {
    try {
      const existingUserByUsername = await storage.getUserByUsername(
        req.body.username
      );
      if (existingUserByUsername) {
        return res.status(400).json({ message: "Username already exists" });
      }
      const existingUserByEmail = await storage.getUserByEmail(req.body.email);
      if (existingUserByEmail) {
        return res.status(400).json({ message: "Email already exists" });
      }
      const hashedPassword = await hashPassword(req.body.password);
      const user = await storage.createUser({
        ...req.body,
        password: hashedPassword,
      });
      req.login(user, (err) => {
        if (err) return next(err);
        storage
          .createLog({
            userId: user.id,
            code: "USER_REG",
            action: "REGISTER",
            description: `User ${user.fullname} registered an account`,
            data: { userId: user.id },
          })
          .finally(() => res.status(201).json(user));
      });
    } catch (error) {
      next(error);
    }
  });

  app.post("/api/login", (req, res, next) => {
    passport.authenticate("local", (err: any, user: SelectUser | false) => {
      if (err) return next(err);
      if (!user)
        return res
          .status(401)
          .json({ message: "Invalid username or password" });
      req.login(user, (loginErr) => {
        if (loginErr) return next(loginErr);
        storage
          .createLog({
            userId: user.id,
            code: "USER_LOGIN",
            action: "LOGIN",
            description: `User ${user.fullname} logged in`,
            data: { userId: user.id },
          })
          .finally(() => res.status(200).json(user));
      });
    })(req, res, next);
  });

  app.post("/api/logout", (req, res, next) => {
    if (req.isAuthenticated()) {
      const user = req.user as SelectUser;
      storage.createLog({
        userId: user.id,
        code: "USER_LOGOUT",
        action: "LOGOUT",
        description: `User ${user.fullname} logged out`,
        data: { userId: user.id },
      });
    }
    req.logout((err) => {
      if (err) return next(err);
      res.sendStatus(200);
    });
  });

  app.get("/api/user", (req, res) => {
    if (!req.isAuthenticated()) {
      return res.sendStatus(401);
    }
    res.json(req.user);
  });
}
